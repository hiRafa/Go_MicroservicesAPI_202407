// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.2
// source: associations.proto

package associationspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AssociationsService_GetAssociationsById_FullMethodName = "/associations.AssociationsService/GetAssociationsById"
	AssociationsService_CreateAssociations_FullMethodName  = "/associations.AssociationsService/CreateAssociations"
)

// AssociationsServiceClient is the client API for AssociationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssociationsServiceClient interface {
	GetAssociationsById(ctx context.Context, in *AssociationsByIdRequest, opts ...grpc.CallOption) (*AssociationsResponse, error)
	CreateAssociations(ctx context.Context, in *CreateAssociationsRequest, opts ...grpc.CallOption) (*AssociationsResponse, error)
}

type associationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssociationsServiceClient(cc grpc.ClientConnInterface) AssociationsServiceClient {
	return &associationsServiceClient{cc}
}

func (c *associationsServiceClient) GetAssociationsById(ctx context.Context, in *AssociationsByIdRequest, opts ...grpc.CallOption) (*AssociationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociationsResponse)
	err := c.cc.Invoke(ctx, AssociationsService_GetAssociationsById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *associationsServiceClient) CreateAssociations(ctx context.Context, in *CreateAssociationsRequest, opts ...grpc.CallOption) (*AssociationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssociationsResponse)
	err := c.cc.Invoke(ctx, AssociationsService_CreateAssociations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssociationsServiceServer is the server API for AssociationsService service.
// All implementations must embed UnimplementedAssociationsServiceServer
// for forward compatibility
type AssociationsServiceServer interface {
	GetAssociationsById(context.Context, *AssociationsByIdRequest) (*AssociationsResponse, error)
	CreateAssociations(context.Context, *CreateAssociationsRequest) (*AssociationsResponse, error)
	mustEmbedUnimplementedAssociationsServiceServer()
}

// UnimplementedAssociationsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAssociationsServiceServer struct {
}

func (UnimplementedAssociationsServiceServer) GetAssociationsById(context.Context, *AssociationsByIdRequest) (*AssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssociationsById not implemented")
}
func (UnimplementedAssociationsServiceServer) CreateAssociations(context.Context, *CreateAssociationsRequest) (*AssociationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssociations not implemented")
}
func (UnimplementedAssociationsServiceServer) mustEmbedUnimplementedAssociationsServiceServer() {}

// UnsafeAssociationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssociationsServiceServer will
// result in compilation errors.
type UnsafeAssociationsServiceServer interface {
	mustEmbedUnimplementedAssociationsServiceServer()
}

func RegisterAssociationsServiceServer(s grpc.ServiceRegistrar, srv AssociationsServiceServer) {
	s.RegisterService(&AssociationsService_ServiceDesc, srv)
}

func _AssociationsService_GetAssociationsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssociationsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationsServiceServer).GetAssociationsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationsService_GetAssociationsById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationsServiceServer).GetAssociationsById(ctx, req.(*AssociationsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssociationsService_CreateAssociations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAssociationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssociationsServiceServer).CreateAssociations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssociationsService_CreateAssociations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssociationsServiceServer).CreateAssociations(ctx, req.(*CreateAssociationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssociationsService_ServiceDesc is the grpc.ServiceDesc for AssociationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssociationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "associations.AssociationsService",
	HandlerType: (*AssociationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAssociationsById",
			Handler:    _AssociationsService_GetAssociationsById_Handler,
		},
		{
			MethodName: "CreateAssociations",
			Handler:    _AssociationsService_CreateAssociations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "associations.proto",
}
